{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Tp_it\u00e9rateurs","text":""},{"location":"#etat-du-tp","title":"\u00c9tat du TP","text":"<p>D\u00e9crivez ici l'\u00e9tat d'avancement du TP.</p>"},{"location":"#reponses-aux-questions","title":"R\u00e9ponses aux questions","text":"<p>Indiquez ici les r\u00e9ponses aux questions pos\u00e9es dans le TP. Vous reprendrez le num\u00e9ro de la section et le num\u00e9ro de la question. Par exemple pour r\u00e9pondre \u00e0 la question 3 de la section 2.4 vous indiquerez :</p>"},{"location":"#etape-a-suivre-pour-execution-des-tests","title":"Etape \u00e0 suivre pour execution des tests:","text":"<ul> <li>Ouvrir le termial et se mettre dans le dossier <code>src</code>contenant le fichier <code>test.py</code>.</li> <li>Commande \u00e0 execut\u00e9e: <code>python3 test.py</code></li> </ul>"},{"location":"#premiere-phase-la-liste-doublement-chainee","title":"Premi\u00e8re phase : la liste doublement cha\u00een\u00e9e","text":""},{"location":"#q1","title":"Q1:","text":"<p>La fonction <code>__print_without_iterator_reversed</code> est fait comme la premi\u00e8re fonction fournie <code>__print_without_iterator_forward</code>, mais au lieu de commencer par la tete et puis avancer vers les autres Cell avec <code>.next</code>, on fait le contraire, on commence par la queue et on acc\u00e8de aux autres \u00e9lements Cell avec <code>/prev</code>.</p> <p>Le rendu du test 0 est comme suit:</p> <p>Commande execut\u00e9e: <code>python3 test.py</code></p> <pre><code>1 2 3 4 \n4 3 2 1 \n</code></pre>"},{"location":"#deuxieme-phase-ajout-des-iterateurs","title":"Deuxi\u00e8me phase : ajout des it\u00e9rateurs","text":""},{"location":"#q1_1","title":"Q1:","text":"<p>Pour d\u00e9finir la classe <code>ListIterator</code>, on aura besoin des informations suivantes: - <code>head</code> - <code>tail</code></p> <pre><code>self.list=list\nself.tail=list.tail\nself.head=list.head\n</code></pre>"},{"location":"#insertion-avec-des-iterateurs","title":"Insertion avec des it\u00e9rateurs","text":""},{"location":"#q1-et-q2","title":"Q1 et Q2:","text":"<p>Apr\u00e8s impl\u00e9mentation de la fonction <code>add(self,value)</code> qui permet de ajouter un \u00e9lement avent l'\u00e9element retourner par <code>next()</code>, l'impl\u00e9mentation permet de g\u00e9rer les trois cas differents qu'on pourrai avoir lors de l'insertion: - Insertion au d\u00e9but de la liste. - Insertion \u00e0 la fin de la liste. - Insertion au milieu de la liste.</p> <p>Le rendu du test 3 est comme suit:</p> <pre><code>--- test 3 ---\n1\n2\n1 2 23 3 4 4 3 23 2 1 #Insertion en milieu de Liste\n</code></pre>"},{"location":"#q3","title":"Q3:","text":"<p>Le rendu du test 4 et 5 est comme suit:</p> <pre><code>--- test 4 ---\n1 2 23 3 4 45 45 4 3 23 2 1 #Insertion en fin de Liste\n--- test 5 ---\n0 1 2 23 3 4 45 45 4 3 23 2 1 0 #Insertion en d\u00e9but de Liste\n</code></pre>"},{"location":"#iterateurs-a-partir-de-la-queue","title":"It\u00e9rateurs \u00e0 partir de la queue","text":""},{"location":"#q3_1","title":"Q3:","text":"<p>Le rendu du test 6 et 7 est comme suit:</p> <pre><code>--- test 6 ---\n0 1 2 23 3 4 445 45 45 445 4 3 23 2 1 0 \n--- test 7 ---\n45\n445\n4\n3\n23\n2\n1\n0\n\n</code></pre>"},{"location":"#q5","title":"Q5:","text":"<p>Le rendu du test 8 est comme suit:</p> <pre><code>--- test 8 ---\n0 1 2 23 3 4 445 45 5 5 45 445 4 3 23 2 1 0\n</code></pre>"},{"location":"#q6","title":"Q6:","text":"<p>Le choix d'impl\u00e9mentation de la fonction <code>ordered_insert</code> qui prend en param\u00e8tre la liste dans laquelle on va ajouter le nouveau element ainsi que la valeur de l'element \u00e0 ajouter, est constitu\u00e9 des \u00e9tapes suivantes: 1. On d\u00e9finit une boucle while avec deux condition:     - <code>iterator.hasNext()</code>:L'element point\u00e9 a une <code>next</code>     - <code>not trouve</code>:La variable initialis\u00e9 a <code>False</code> et qui devient <code>True</code>, quand l'element est trouv\u00e9 est encore en <code>False</code>.  2. Si l'\u00e9lement <code>next</code> de l'\u00e9lement courant est sup\u00e9rieur \u00e0 la valeur qu'on voudrait rajouter on d\u00e9clare qu'on a trouv\u00e9 la position o\u00f9 on veux ajouter l'element \u00e0 la variable <code>trouv\u00e9</code> en chang\u00e9 sa valeur \u00e0 True, et on sortira de la boucle pour ex\u00e9cuter l'instruction <code>iterator.add(value)</code> qui permet de rajouter l'element. 3. Sinon on ex\u00e9cute l'instruction <code>iterator.next()</code> pour it\u00e9rer vers l'element suivant.</p> <p>Le rendu du test 9 est comme suit:</p> <pre><code>--- test 9 ---\n0 1 2 3 4 5 5 4 3 2 1 0\n</code></pre>"},{"location":"#suppression-avec-des-iterateurs","title":"Suppression avec des it\u00e9rateurs","text":""},{"location":"#q1_2","title":"Q1:","text":"<p>Oui l'implantation r\u00e9alis\u00e9e ici est compatible avec des op\u00e9rations de suppression parce qu'avec cette implantation on a acc\u00e8s \u00e0 tous les elements de la liste n\u00e9cessaire pour les op\u00e9rations de suppression comme <code>next, prev...</code>.</p>"},{"location":"#q3_2","title":"Q3:","text":"<p>On a ajout\u00e9 cette derni\u00e8re contrainte pour \u00e9viter de faire un appel \u00e0 la fonction previous() vers le vide et declancher une exception.</p>"},{"location":"#q4","title":"Q4:","text":"<p>Pour supprimer tous les \u00e9lements d'une liste gr\u00e2ce aux it\u00e9rateurs, il faudra \u00e9xecuter la suite d'instruction suivante:</p> <pre><code>iterator = l.get_listiterator()  \n\nwhile iterator.hasNext():\n    iterator.next()\n    iterator.remove()\n</code></pre>"},{"location":"#q5_1","title":"Q5:","text":"<p>Le rendu du test 10 et 11 est comme suit:</p> <pre><code>1 2 3 4 4 3 2 1\n--- test 10 ---\n2 3 4 4 3 2\n--- test 11 ---\n2 3 3 2\n</code></pre>"},{"location":"#performance-de-lacces-au-i-eme-element","title":"Performance de l'acc\u00e8s au i-\u00e8me \u00e9l\u00e9ment","text":"<p>Les r\u00e9sultats montrent que l'utilisation d'un <code>it\u00e9rateur</code> pour parcourir une liste est plus rapide que l'acc\u00e8s direct aux \u00e9l\u00e9ments via une m\u00e9thode <code>get</code>, en particulier lorsque la taille de la liste augmente. Cela met en \u00e9vidence l'efficacit\u00e9 des <code>it\u00e9rateurs</code> pour manipuler de grandes structures de donn\u00e9es,</p>"},{"location":"modules/","title":"Modules pour le TP","text":""},{"location":"modules/#module-listiterator","title":"Module <code>ListIterator</code>","text":"<p>Module that implements lists with iterator interaction</p> <p>Provides constructor, selectors and modifiers for mutable lists. Lists of this module must be traversed via iterators. </p> <p>An iterator for lists allows the programmer to traverse the list in either direction and adding elements to the list during iteration.  </p> <p>An iterator has no current element; its cursor position always lies between the element that would be returned by a call to <code>previous</code> and the element that would be returned by a call to <code>next</code>. </p> <p>An iterator for a list of length <code>n</code> has <code>n+1</code> possible cursor positions, as illustrated by the carets (<code>^</code>) below:</p> <pre><code>\n                      Element(0)   Element(1)   Element(2)   ... Element(n-1)\n cursor positions:  ^            ^            ^            ^                  ^\n</code></pre> Author <p>Dpt Informatique - FST - Univ. Lille 2021, february</p>"},{"location":"modules/#src.listiterator.EmptyList","title":"<code>EmptyList</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Exception for empty lists</p> Source code in <code>src/listiterator.py</code> <pre><code>class EmptyList (Exception):\n    \"\"\"\n    Exception for empty lists\n    \"\"\"\n    def __init__ (self,msg):\n        self.message = msg\n</code></pre>"},{"location":"modules/#src.listiterator.List","title":"<code>List</code>","text":"<p>Double-linked lists</p> Source code in <code>src/listiterator.py</code> <pre><code>class List:\n    '''\n    Double-linked lists\n    '''\n\n    class Cell:\n        '''\n        Double-linked cells\n        '''\n\n        def __init__(self, value, next_cell, prev_cell):\n            '''\n            Creates a new cell with the specified values, and the links\n            to the next and previous cells (if any).\n\n            Args:\n              value (any): A value\n              next_cell (Cell): The successor of this cell, if any or `None` otherwise\n              prev_cell (Cell): The predecessor of this cell, if any or `None` otherwise\n            '''\n            self.value = value\n            self.next = next_cell\n            self.prev = prev_cell\n\n        def __print_without_iterator_forward (self):\n            \"\"\"\n            Print all the list from the cell until the end\n            \"\"\"\n            print(self.value, end=' ')\n            if self.next != None:\n                self.next.__print_without_iterator_forward ()\n            else:\n                print()\n\n        def __print_without_iterator_reversed (self):\n            \"\"\"\n            Print all the list from the cell back to the beginning of the list\n            \"\"\"\n            print(self.value, end=' ')\n            if self.prev != None:\n                self.prev.__print_without_iterator_reversed ()\n            else:\n                print()\n\n    def __init__ (self):\n        \"\"\"\n        Creates a new empty list.\n        \"\"\"    \n        self.head = None\n        self.tail = None\n\n    def is_empty (self):\n        \"\"\"\n        Returns:\n          bool: `True` if the list is empty, `False` otherwise.\n        \"\"\"\n        return self.head == None and self.tail == None\n\n    def cons (self, value):\n        \"\"\"\n        Add the value `value` at the begining of the list\n\n        Args:\n          value (any): The value to be added.\n\n        Warning: Pre-condition\n                 Cannot be used with iterators\n        \"\"\"\n        if self.head == None:\n            self.head = self.tail = List.Cell(value, None, None)\n        else:\n            self.head = List.Cell(value, self.head, None)\n            self.head.next.prev = self.head\n\n\n\n    def print (self,reverse=False):\n        \"\"\"\n        Args:\n          reverse (bool): `True` if the the current list must be printed from the end to the beginning\n        \"\"\"\n        if self.is_empty():\n            raise EmptyList(\"The list has no elements\")\n        if reverse:\n            self.tail._Cell__print_without_iterator_reversed()\n        else:\n            self.head._Cell__print_without_iterator_forward()\n\n\n    def get_listiterator (self , reverse = False):\n        \"\"\"\n        Creates a new iterator for the list\n\n        Returns:\n          ListIterator: An iterator at the beginning of the list\n        \"\"\"\n        # return List.ListIterator(self)\n        if reverse == True:\n            return List.ListIterator(self,reverse)\n        return List.ListIterator(self)\n\n\n    class ListIterator:\n        '''\n        Iterator over double-linked lists\n        '''\n\n        def __init__(self, list, reverse=False):\n            '''\n            Builds a ListIterator on the provided list.\n            The iterator is at the beginning of the list.\n\n            Args:\n              list (List): The list to iterate on\n            '''\n\n            # self.list=list\n            # self.nextCell=list.head\n            # self.prevCell=None  \n            # self.current_cell = list.head\n\n            self.reverse = reverse\n\n            if self.reverse == True:\n                self.list = list\n                self.prevCell = list.tail\n                self.nextCell = None\n                self.current_cell = list.tail\n            else:\n                self.list = list\n                self.nextCell = list.head\n                self.prevCell = None  \n                self.current_cell = list.head\n\n\n        def hasNext (self):\n            \"\"\"\n            Returns:\n              bool: `True` if this list iterator has more elements when\n                     traversing the list in the forward direction. \n                     (In other words, returns `True` if `self.next()` would\n                     return an element rather than throwing an exception.)\n            \"\"\"\n            return self.nextCell!=None\n\n\n        def next (self):\n            \"\"\"\n            Returns:\n              the next element in the list and advances the cursor\n              position. This method may be called repeatedly to iterate through\n              the list, or intermixed with calls to `self.previous()` to go back\n              and forth. (Note that alternating calls to next and previous will\n              return the same element repeatedly.)\n\n            Raises:\n              NoSuchElementException: if there is no such element\n            \"\"\"\n            if self.hasNext():\n              nextCellule = self.nextCell\n              self.nextCell = self.nextCell.next\n              self.prevCell = nextCellule\n              return nextCellule.value\n            else:\n              raise NoSuchElementException(\"There is no such element\")\n\n\n        def hasPrevious (self):\n            \"\"\"\n            Returns: \n              bool: `True` if this list iterator has more elements when\n              traversing the list in the reverse direction. (In other words,\n              returns `True` if `self.previous()` would return an\n              element rather than throwing an exception.)\n            \"\"\"\n            return self.prevCell!=None\n\n        def previous (self):\n            \"\"\"\n            Returns:\n              the previous element in the list and moves the cursor\n              position backwards. This method may be called repeatedly to\n              iterate through the list backwards, or intermixed with calls to\n              `self.next()` to go back and forth. (Note that alternating \n              calls to next and previous will return the same element repeatedly.)\n\n            Raises:\n              NoSuchElementException: if there is no such element\n            \"\"\"\n            if self.hasPrevious ():\n                prevCellule=self.prevCell\n                self.nextCell=prevCellule \n                self.prevCell=self.prevCell.prev\n                return prevCellule.value\n            else:\n              raise NoSuchElementException('There is no such element')\n\n        def add (self,value):\n            \"\"\"\n            Inserts the specified element into the list. The element is\n            inserted immediately before the element that would be returned by\n            `next()`, if any, and after the element that would be returned by\n            `previous()`, if any. (If the list contains no elements, the new\n            element becomes the sole element on the list.) The new element is\n            inserted before the implicit cursor: a subsequent call to `next()`\n            would be unaffected, and a subsequent call to `previous()` would\n            return the new element.\n\n            Args:\n              value (any): The element\n            \"\"\"\n            #Insertion \u00e0 la fin de la liste\n            if not self.hasNext():\n                prevCellule=self.prevCell\n                newCell=self.list.Cell(value, None, prevCellule)\n                self.prevCell.next=newCell\n                self.nextCell=newCell\n                self.next()\n                self.list.tail=newCell\n            #Insertion au d\u00e9but de la liste\n            elif not self.hasPrevious():\n                newCell=self.list.Cell(value, self.nextCell, None)\n                self.list.head=newCell\n                self.prevCell=newCell\n                self.nextCell.prev=newCell\n            #Inserion au milieu de la liste \n            else:\n                prevCellule=self.prevCell\n                newCell=self.list.Cell(value, self.nextCell, prevCellule)\n                self.prevCell.next=newCell\n                self.nextCell.prev=newCell\n                self.next()\n                self.previous()\n\n            return newCell\n\n        def remove (self):\n            \"\"\"\n            Removes from the list the last element that was returned by\n            `next()`. This call can only be made once per call to `next()`.\n            \"\"\"\n            nextval=self.nextCell\n            # D\u00e9place l'it\u00e9rateur en arri\u00e8re pour positionner `prevCell` sur l'\u00e9lement \u00e0 supprimer\n            self.previous()\n            # R\u00e9initialise `nextCell` pour pointer vers l'element qui suit l'element supprim\u00e9\n            self.nextCell=nextval\n            # Suppression en tete\n            if not self.hasPrevious():\n                # La t\u00eate de la liste est mise \u00e0 jour pour pointer sur `nextCell`\n                self.list.head=self.nextCell\n            else:\n                # Sinon, on relie l'element pr\u00e9c\u00e9dent \u00e0 l'elment suivant pour retirer l'element courant \u00e0 supprimer\n                self.prevCell.next=nextval\n            # Suppression en \u00e0 la queue\n            if not self.hasNext():\n                # La queue de la liste est mise \u00e0 jour pour pointer sur `prevCell`\n                self.list.tail=self.prevCell\n            else:\n                # Sinon, on relie l'element suivant \u00e0 l'element pr\u00e9c\u00e9dent\n                nextval.prev=self.prevCell\n</code></pre>"},{"location":"modules/#src.listiterator.List.Cell","title":"<code>Cell</code>","text":"<p>Double-linked cells</p> Source code in <code>src/listiterator.py</code> <pre><code>class Cell:\n    '''\n    Double-linked cells\n    '''\n\n    def __init__(self, value, next_cell, prev_cell):\n        '''\n        Creates a new cell with the specified values, and the links\n        to the next and previous cells (if any).\n\n        Args:\n          value (any): A value\n          next_cell (Cell): The successor of this cell, if any or `None` otherwise\n          prev_cell (Cell): The predecessor of this cell, if any or `None` otherwise\n        '''\n        self.value = value\n        self.next = next_cell\n        self.prev = prev_cell\n\n    def __print_without_iterator_forward (self):\n        \"\"\"\n        Print all the list from the cell until the end\n        \"\"\"\n        print(self.value, end=' ')\n        if self.next != None:\n            self.next.__print_without_iterator_forward ()\n        else:\n            print()\n\n    def __print_without_iterator_reversed (self):\n        \"\"\"\n        Print all the list from the cell back to the beginning of the list\n        \"\"\"\n        print(self.value, end=' ')\n        if self.prev != None:\n            self.prev.__print_without_iterator_reversed ()\n        else:\n            print()\n</code></pre>"},{"location":"modules/#src.listiterator.List.Cell.__init__","title":"<code>__init__(value, next_cell, prev_cell)</code>","text":"<p>Creates a new cell with the specified values, and the links to the next and previous cells (if any).</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>any</code> <p>A value</p> required <code>next_cell</code> <code>Cell</code> <p>The successor of this cell, if any or <code>None</code> otherwise</p> required <code>prev_cell</code> <code>Cell</code> <p>The predecessor of this cell, if any or <code>None</code> otherwise</p> required Source code in <code>src/listiterator.py</code> <pre><code>def __init__(self, value, next_cell, prev_cell):\n    '''\n    Creates a new cell with the specified values, and the links\n    to the next and previous cells (if any).\n\n    Args:\n      value (any): A value\n      next_cell (Cell): The successor of this cell, if any or `None` otherwise\n      prev_cell (Cell): The predecessor of this cell, if any or `None` otherwise\n    '''\n    self.value = value\n    self.next = next_cell\n    self.prev = prev_cell\n</code></pre>"},{"location":"modules/#src.listiterator.List.Cell.__print_without_iterator_forward","title":"<code>__print_without_iterator_forward()</code>","text":"<p>Print all the list from the cell until the end</p> Source code in <code>src/listiterator.py</code> <pre><code>def __print_without_iterator_forward (self):\n    \"\"\"\n    Print all the list from the cell until the end\n    \"\"\"\n    print(self.value, end=' ')\n    if self.next != None:\n        self.next.__print_without_iterator_forward ()\n    else:\n        print()\n</code></pre>"},{"location":"modules/#src.listiterator.List.Cell.__print_without_iterator_reversed","title":"<code>__print_without_iterator_reversed()</code>","text":"<p>Print all the list from the cell back to the beginning of the list</p> Source code in <code>src/listiterator.py</code> <pre><code>def __print_without_iterator_reversed (self):\n    \"\"\"\n    Print all the list from the cell back to the beginning of the list\n    \"\"\"\n    print(self.value, end=' ')\n    if self.prev != None:\n        self.prev.__print_without_iterator_reversed ()\n    else:\n        print()\n</code></pre>"},{"location":"modules/#src.listiterator.List.ListIterator","title":"<code>ListIterator</code>","text":"<p>Iterator over double-linked lists</p> Source code in <code>src/listiterator.py</code> <pre><code>class ListIterator:\n    '''\n    Iterator over double-linked lists\n    '''\n\n    def __init__(self, list, reverse=False):\n        '''\n        Builds a ListIterator on the provided list.\n        The iterator is at the beginning of the list.\n\n        Args:\n          list (List): The list to iterate on\n        '''\n\n        # self.list=list\n        # self.nextCell=list.head\n        # self.prevCell=None  \n        # self.current_cell = list.head\n\n        self.reverse = reverse\n\n        if self.reverse == True:\n            self.list = list\n            self.prevCell = list.tail\n            self.nextCell = None\n            self.current_cell = list.tail\n        else:\n            self.list = list\n            self.nextCell = list.head\n            self.prevCell = None  \n            self.current_cell = list.head\n\n\n    def hasNext (self):\n        \"\"\"\n        Returns:\n          bool: `True` if this list iterator has more elements when\n                 traversing the list in the forward direction. \n                 (In other words, returns `True` if `self.next()` would\n                 return an element rather than throwing an exception.)\n        \"\"\"\n        return self.nextCell!=None\n\n\n    def next (self):\n        \"\"\"\n        Returns:\n          the next element in the list and advances the cursor\n          position. This method may be called repeatedly to iterate through\n          the list, or intermixed with calls to `self.previous()` to go back\n          and forth. (Note that alternating calls to next and previous will\n          return the same element repeatedly.)\n\n        Raises:\n          NoSuchElementException: if there is no such element\n        \"\"\"\n        if self.hasNext():\n          nextCellule = self.nextCell\n          self.nextCell = self.nextCell.next\n          self.prevCell = nextCellule\n          return nextCellule.value\n        else:\n          raise NoSuchElementException(\"There is no such element\")\n\n\n    def hasPrevious (self):\n        \"\"\"\n        Returns: \n          bool: `True` if this list iterator has more elements when\n          traversing the list in the reverse direction. (In other words,\n          returns `True` if `self.previous()` would return an\n          element rather than throwing an exception.)\n        \"\"\"\n        return self.prevCell!=None\n\n    def previous (self):\n        \"\"\"\n        Returns:\n          the previous element in the list and moves the cursor\n          position backwards. This method may be called repeatedly to\n          iterate through the list backwards, or intermixed with calls to\n          `self.next()` to go back and forth. (Note that alternating \n          calls to next and previous will return the same element repeatedly.)\n\n        Raises:\n          NoSuchElementException: if there is no such element\n        \"\"\"\n        if self.hasPrevious ():\n            prevCellule=self.prevCell\n            self.nextCell=prevCellule \n            self.prevCell=self.prevCell.prev\n            return prevCellule.value\n        else:\n          raise NoSuchElementException('There is no such element')\n\n    def add (self,value):\n        \"\"\"\n        Inserts the specified element into the list. The element is\n        inserted immediately before the element that would be returned by\n        `next()`, if any, and after the element that would be returned by\n        `previous()`, if any. (If the list contains no elements, the new\n        element becomes the sole element on the list.) The new element is\n        inserted before the implicit cursor: a subsequent call to `next()`\n        would be unaffected, and a subsequent call to `previous()` would\n        return the new element.\n\n        Args:\n          value (any): The element\n        \"\"\"\n        #Insertion \u00e0 la fin de la liste\n        if not self.hasNext():\n            prevCellule=self.prevCell\n            newCell=self.list.Cell(value, None, prevCellule)\n            self.prevCell.next=newCell\n            self.nextCell=newCell\n            self.next()\n            self.list.tail=newCell\n        #Insertion au d\u00e9but de la liste\n        elif not self.hasPrevious():\n            newCell=self.list.Cell(value, self.nextCell, None)\n            self.list.head=newCell\n            self.prevCell=newCell\n            self.nextCell.prev=newCell\n        #Inserion au milieu de la liste \n        else:\n            prevCellule=self.prevCell\n            newCell=self.list.Cell(value, self.nextCell, prevCellule)\n            self.prevCell.next=newCell\n            self.nextCell.prev=newCell\n            self.next()\n            self.previous()\n\n        return newCell\n\n    def remove (self):\n        \"\"\"\n        Removes from the list the last element that was returned by\n        `next()`. This call can only be made once per call to `next()`.\n        \"\"\"\n        nextval=self.nextCell\n        # D\u00e9place l'it\u00e9rateur en arri\u00e8re pour positionner `prevCell` sur l'\u00e9lement \u00e0 supprimer\n        self.previous()\n        # R\u00e9initialise `nextCell` pour pointer vers l'element qui suit l'element supprim\u00e9\n        self.nextCell=nextval\n        # Suppression en tete\n        if not self.hasPrevious():\n            # La t\u00eate de la liste est mise \u00e0 jour pour pointer sur `nextCell`\n            self.list.head=self.nextCell\n        else:\n            # Sinon, on relie l'element pr\u00e9c\u00e9dent \u00e0 l'elment suivant pour retirer l'element courant \u00e0 supprimer\n            self.prevCell.next=nextval\n        # Suppression en \u00e0 la queue\n        if not self.hasNext():\n            # La queue de la liste est mise \u00e0 jour pour pointer sur `prevCell`\n            self.list.tail=self.prevCell\n        else:\n            # Sinon, on relie l'element suivant \u00e0 l'element pr\u00e9c\u00e9dent\n            nextval.prev=self.prevCell\n</code></pre>"},{"location":"modules/#src.listiterator.List.ListIterator.__init__","title":"<code>__init__(list, reverse=False)</code>","text":"<p>Builds a ListIterator on the provided list. The iterator is at the beginning of the list.</p> <p>Parameters:</p> Name Type Description Default <code>list</code> <code>List</code> <p>The list to iterate on</p> required Source code in <code>src/listiterator.py</code> <pre><code>def __init__(self, list, reverse=False):\n    '''\n    Builds a ListIterator on the provided list.\n    The iterator is at the beginning of the list.\n\n    Args:\n      list (List): The list to iterate on\n    '''\n\n    # self.list=list\n    # self.nextCell=list.head\n    # self.prevCell=None  \n    # self.current_cell = list.head\n\n    self.reverse = reverse\n\n    if self.reverse == True:\n        self.list = list\n        self.prevCell = list.tail\n        self.nextCell = None\n        self.current_cell = list.tail\n    else:\n        self.list = list\n        self.nextCell = list.head\n        self.prevCell = None  \n        self.current_cell = list.head\n</code></pre>"},{"location":"modules/#src.listiterator.List.ListIterator.add","title":"<code>add(value)</code>","text":"<p>Inserts the specified element into the list. The element is inserted immediately before the element that would be returned by <code>next()</code>, if any, and after the element that would be returned by <code>previous()</code>, if any. (If the list contains no elements, the new element becomes the sole element on the list.) The new element is inserted before the implicit cursor: a subsequent call to <code>next()</code> would be unaffected, and a subsequent call to <code>previous()</code> would return the new element.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>any</code> <p>The element</p> required Source code in <code>src/listiterator.py</code> <pre><code>def add (self,value):\n    \"\"\"\n    Inserts the specified element into the list. The element is\n    inserted immediately before the element that would be returned by\n    `next()`, if any, and after the element that would be returned by\n    `previous()`, if any. (If the list contains no elements, the new\n    element becomes the sole element on the list.) The new element is\n    inserted before the implicit cursor: a subsequent call to `next()`\n    would be unaffected, and a subsequent call to `previous()` would\n    return the new element.\n\n    Args:\n      value (any): The element\n    \"\"\"\n    #Insertion \u00e0 la fin de la liste\n    if not self.hasNext():\n        prevCellule=self.prevCell\n        newCell=self.list.Cell(value, None, prevCellule)\n        self.prevCell.next=newCell\n        self.nextCell=newCell\n        self.next()\n        self.list.tail=newCell\n    #Insertion au d\u00e9but de la liste\n    elif not self.hasPrevious():\n        newCell=self.list.Cell(value, self.nextCell, None)\n        self.list.head=newCell\n        self.prevCell=newCell\n        self.nextCell.prev=newCell\n    #Inserion au milieu de la liste \n    else:\n        prevCellule=self.prevCell\n        newCell=self.list.Cell(value, self.nextCell, prevCellule)\n        self.prevCell.next=newCell\n        self.nextCell.prev=newCell\n        self.next()\n        self.previous()\n\n    return newCell\n</code></pre>"},{"location":"modules/#src.listiterator.List.ListIterator.hasNext","title":"<code>hasNext()</code>","text":"<p>Returns:</p> Name Type Description <code>bool</code> <p><code>True</code> if this list iterator has more elements when      traversing the list in the forward direction.       (In other words, returns <code>True</code> if <code>self.next()</code> would      return an element rather than throwing an exception.)</p> Source code in <code>src/listiterator.py</code> <pre><code>def hasNext (self):\n    \"\"\"\n    Returns:\n      bool: `True` if this list iterator has more elements when\n             traversing the list in the forward direction. \n             (In other words, returns `True` if `self.next()` would\n             return an element rather than throwing an exception.)\n    \"\"\"\n    return self.nextCell!=None\n</code></pre>"},{"location":"modules/#src.listiterator.List.ListIterator.hasPrevious","title":"<code>hasPrevious()</code>","text":"<p>Returns:</p> Name Type Description <code>bool</code> <p><code>True</code> if this list iterator has more elements when</p> <p>traversing the list in the reverse direction. (In other words,</p> <p>returns <code>True</code> if <code>self.previous()</code> would return an</p> <p>element rather than throwing an exception.)</p> Source code in <code>src/listiterator.py</code> <pre><code>def hasPrevious (self):\n    \"\"\"\n    Returns: \n      bool: `True` if this list iterator has more elements when\n      traversing the list in the reverse direction. (In other words,\n      returns `True` if `self.previous()` would return an\n      element rather than throwing an exception.)\n    \"\"\"\n    return self.prevCell!=None\n</code></pre>"},{"location":"modules/#src.listiterator.List.ListIterator.next","title":"<code>next()</code>","text":"<p>Returns:</p> Type Description <p>the next element in the list and advances the cursor</p> <p>position. This method may be called repeatedly to iterate through</p> <p>the list, or intermixed with calls to <code>self.previous()</code> to go back</p> <p>and forth. (Note that alternating calls to next and previous will</p> <p>return the same element repeatedly.)</p> <p>Raises:</p> Type Description <code>NoSuchElementException</code> <p>if there is no such element</p> Source code in <code>src/listiterator.py</code> <pre><code>def next (self):\n    \"\"\"\n    Returns:\n      the next element in the list and advances the cursor\n      position. This method may be called repeatedly to iterate through\n      the list, or intermixed with calls to `self.previous()` to go back\n      and forth. (Note that alternating calls to next and previous will\n      return the same element repeatedly.)\n\n    Raises:\n      NoSuchElementException: if there is no such element\n    \"\"\"\n    if self.hasNext():\n      nextCellule = self.nextCell\n      self.nextCell = self.nextCell.next\n      self.prevCell = nextCellule\n      return nextCellule.value\n    else:\n      raise NoSuchElementException(\"There is no such element\")\n</code></pre>"},{"location":"modules/#src.listiterator.List.ListIterator.previous","title":"<code>previous()</code>","text":"<p>Returns:</p> Type Description <p>the previous element in the list and moves the cursor</p> <p>position backwards. This method may be called repeatedly to</p> <p>iterate through the list backwards, or intermixed with calls to</p> <p><code>self.next()</code> to go back and forth. (Note that alternating </p> <p>calls to next and previous will return the same element repeatedly.)</p> <p>Raises:</p> Type Description <code>NoSuchElementException</code> <p>if there is no such element</p> Source code in <code>src/listiterator.py</code> <pre><code>def previous (self):\n    \"\"\"\n    Returns:\n      the previous element in the list and moves the cursor\n      position backwards. This method may be called repeatedly to\n      iterate through the list backwards, or intermixed with calls to\n      `self.next()` to go back and forth. (Note that alternating \n      calls to next and previous will return the same element repeatedly.)\n\n    Raises:\n      NoSuchElementException: if there is no such element\n    \"\"\"\n    if self.hasPrevious ():\n        prevCellule=self.prevCell\n        self.nextCell=prevCellule \n        self.prevCell=self.prevCell.prev\n        return prevCellule.value\n    else:\n      raise NoSuchElementException('There is no such element')\n</code></pre>"},{"location":"modules/#src.listiterator.List.ListIterator.remove","title":"<code>remove()</code>","text":"<p>Removes from the list the last element that was returned by <code>next()</code>. This call can only be made once per call to <code>next()</code>.</p> Source code in <code>src/listiterator.py</code> <pre><code>def remove (self):\n    \"\"\"\n    Removes from the list the last element that was returned by\n    `next()`. This call can only be made once per call to `next()`.\n    \"\"\"\n    nextval=self.nextCell\n    # D\u00e9place l'it\u00e9rateur en arri\u00e8re pour positionner `prevCell` sur l'\u00e9lement \u00e0 supprimer\n    self.previous()\n    # R\u00e9initialise `nextCell` pour pointer vers l'element qui suit l'element supprim\u00e9\n    self.nextCell=nextval\n    # Suppression en tete\n    if not self.hasPrevious():\n        # La t\u00eate de la liste est mise \u00e0 jour pour pointer sur `nextCell`\n        self.list.head=self.nextCell\n    else:\n        # Sinon, on relie l'element pr\u00e9c\u00e9dent \u00e0 l'elment suivant pour retirer l'element courant \u00e0 supprimer\n        self.prevCell.next=nextval\n    # Suppression en \u00e0 la queue\n    if not self.hasNext():\n        # La queue de la liste est mise \u00e0 jour pour pointer sur `prevCell`\n        self.list.tail=self.prevCell\n    else:\n        # Sinon, on relie l'element suivant \u00e0 l'element pr\u00e9c\u00e9dent\n        nextval.prev=self.prevCell\n</code></pre>"},{"location":"modules/#src.listiterator.List.__init__","title":"<code>__init__()</code>","text":"<p>Creates a new empty list.</p> Source code in <code>src/listiterator.py</code> <pre><code>def __init__ (self):\n    \"\"\"\n    Creates a new empty list.\n    \"\"\"    \n    self.head = None\n    self.tail = None\n</code></pre>"},{"location":"modules/#src.listiterator.List.cons","title":"<code>cons(value)</code>","text":"<p>Add the value <code>value</code> at the begining of the list</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>any</code> <p>The value to be added.</p> required Pre-condition <p>Cannot be used with iterators</p> Source code in <code>src/listiterator.py</code> <pre><code>def cons (self, value):\n    \"\"\"\n    Add the value `value` at the begining of the list\n\n    Args:\n      value (any): The value to be added.\n\n    Warning: Pre-condition\n             Cannot be used with iterators\n    \"\"\"\n    if self.head == None:\n        self.head = self.tail = List.Cell(value, None, None)\n    else:\n        self.head = List.Cell(value, self.head, None)\n        self.head.next.prev = self.head\n</code></pre>"},{"location":"modules/#src.listiterator.List.get_listiterator","title":"<code>get_listiterator(reverse=False)</code>","text":"<p>Creates a new iterator for the list</p> <p>Returns:</p> Name Type Description <code>ListIterator</code> <p>An iterator at the beginning of the list</p> Source code in <code>src/listiterator.py</code> <pre><code>def get_listiterator (self , reverse = False):\n    \"\"\"\n    Creates a new iterator for the list\n\n    Returns:\n      ListIterator: An iterator at the beginning of the list\n    \"\"\"\n    # return List.ListIterator(self)\n    if reverse == True:\n        return List.ListIterator(self,reverse)\n    return List.ListIterator(self)\n</code></pre>"},{"location":"modules/#src.listiterator.List.is_empty","title":"<code>is_empty()</code>","text":"<p>Returns:</p> Name Type Description <code>bool</code> <p><code>True</code> if the list is empty, <code>False</code> otherwise.</p> Source code in <code>src/listiterator.py</code> <pre><code>def is_empty (self):\n    \"\"\"\n    Returns:\n      bool: `True` if the list is empty, `False` otherwise.\n    \"\"\"\n    return self.head == None and self.tail == None\n</code></pre>"},{"location":"modules/#src.listiterator.List.print","title":"<code>print(reverse=False)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>reverse</code> <code>bool</code> <p><code>True</code> if the the current list must be printed from the end to the beginning</p> <code>False</code> Source code in <code>src/listiterator.py</code> <pre><code>def print (self,reverse=False):\n    \"\"\"\n    Args:\n      reverse (bool): `True` if the the current list must be printed from the end to the beginning\n    \"\"\"\n    if self.is_empty():\n        raise EmptyList(\"The list has no elements\")\n    if reverse:\n        self.tail._Cell__print_without_iterator_reversed()\n    else:\n        self.head._Cell__print_without_iterator_forward()\n</code></pre>"},{"location":"modules/#src.listiterator.NoSuchElementException","title":"<code>NoSuchElementException</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Exception for iterators not positionned</p> Source code in <code>src/listiterator.py</code> <pre><code>class NoSuchElementException (Exception):\n    \"\"\"\n    Exception for iterators not positionned\n    \"\"\"\n    def __init__ (self,msg):\n        self.message = msg\n</code></pre>"},{"location":"modules/#module-test","title":"Module <code>Test</code>","text":""},{"location":"modules/#src.test.get","title":"<code>get(l, i)</code>","text":"<p>Get the i-th element of <code>l</code>. With i=0, we get the head of the list</p> <p>Parameters:</p> Name Type Description Default <code>l</code> <code>List</code> <p>A list.</p> required <p>Returns:</p> Type Description <p>the i-th element    </p> <p>Raises:</p> Type Description <code>NoSuchElementException</code> <p>if <code>i</code> is out of bounds.</p> Source code in <code>src/test.py</code> <pre><code>def get (l, i):\n    \"\"\"\n    Get the i-th element of `l`.\n    With i=0, we get the head of the list\n\n    Args:\n      l (List): A list.\n\n    Returns:\n      the i-th element    \n\n    Raises:\n      NoSuchElementException: if `i` is out of bounds.\n    \"\"\"\n    current = l.head\n    j=0\n    while current is not None:\n        if j == i:\n            return current.value\n        current = current.next\n        j += 1\n    raise NoSuchElementException(\"L'index que vous cherchez n'existe pas\")\n</code></pre>"},{"location":"modules/#src.test.ordered_insert","title":"<code>ordered_insert(l, value)</code>","text":"<p>Add <code>value</code> to list <code>l</code> such that <code>l</code> is kept ordered.</p> <p>Parameters:</p> Name Type Description Default <code>l</code> <code>List</code> <p>An ordered list.</p> required <code>value</code> <code>same as elements of `l`</code> <p>The value to be inserted.</p> required Source code in <code>src/test.py</code> <pre><code>def ordered_insert (l, value):\n    \"\"\"\n    Add `value` to list `l` such that `l` is kept ordered.\n\n    Args:\n      l (List): An ordered list.\n      value (same as elements of `l`): The value to be inserted.\n    \"\"\"\n    iterator=l.get_listiterator()\n    trouve=False\n    while (iterator.hasNext() and (not trouve)):\n        if iterator.nextCell.value&gt;value:\n            trouve=True\n        else:\n            iterator.next()\n    iterator.add(value)\n</code></pre>"},{"location":"modules/#src.test.print_with_iterator","title":"<code>print_with_iterator(l)</code>","text":"<p>Print elements of a list using an iterator.</p> <p>Parameters:</p> Name Type Description Default <code>l</code> <code>List</code> <p>The list to be printed</p> required Source code in <code>src/test.py</code> <pre><code>def print_with_iterator (l):\n    \"\"\"\n    Print elements of a list using an iterator.\n\n    Args:\n      l (List): The list to be printed\n    \"\"\"\n    iterator = l.get_listiterator()\n    while iterator.hasNext():\n      print(iterator.next(), end=' ')\n</code></pre>"},{"location":"modules/#src.test.print_with_iterator_reverse","title":"<code>print_with_iterator_reverse(l)</code>","text":"<p>Print elements of a list using an iterator in reverse order.</p> <p>Parameters:</p> Name Type Description Default <code>l</code> <code>List</code> <p>The list to be printed</p> required Source code in <code>src/test.py</code> <pre><code>def print_with_iterator_reverse (l):\n    \"\"\"\n    Print elements of a list using an iterator in reverse order.\n\n    Args:\n      l (List): The list to be printed\n    \"\"\"\n    iterator = l.get_listiterator()\n    while iterator.hasNext():\n      iterator.next()\n    while iterator.hasPrevious():\n      print(iterator.previous(), end=' ')\n</code></pre>"},{"location":"modules/#src.test.print_with_iterator_reverse_bis","title":"<code>print_with_iterator_reverse_bis(l)</code>","text":"<p>Print elements of a list using an iterator in reverse order.</p> <p>Parameters:</p> Name Type Description Default <code>l</code> <code>List</code> <p>The list to be printed</p> required Source code in <code>src/test.py</code> <pre><code>def print_with_iterator_reverse_bis (l):\n    \"\"\"\n    Print elements of a list using an iterator in reverse order.\n\n    Args:\n      l (List): The list to be printed\n    \"\"\"\n    iterator = l.get_listiterator(reverse=True)\n    while iterator.hasPrevious():\n        print(iterator.previous())\n</code></pre>"}]}